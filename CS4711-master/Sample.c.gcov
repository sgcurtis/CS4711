        -:    0:Source:Sample.c
        -:    0:Graph:Sample.gcno
        -:    0:Data:Sample.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:/*
        -:    2: ============================================================================
        -:    3: Name        : Conway.c
        -:    4: Author      : 
        -:    5: Version     :
        -:    6: Copyright   : Your copyright notice
        -:    7: Description : Hello World in C, Ansi-style
        -:    8: ============================================================================
        -:    9: */
        -:   10:
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:char field[xSize][ySize];
        1:   14://variables for recording user's input on size of field, cell placement, etc.
        -:   15:	//names should be self explanitonway's Game of Life\n\n");
        -:   16:	int xSize = 0;
        1:   17:	int ySize = 0;
        1:   18:	int numCycles = 1;
        1:   19:	int xStart = 0;
        1:   20:	int yStart = 0;
        1:   21:	int xStart2 = 0;
        1:   22:	int yStart2 = 0;
        1:   23:	int xStart3 = 0;
        1:   24:	int yStart3 = 0;
        1:   25:	char* widthBuff[8];
        -:   26:	char* heightBuff[8];
        -:   27:	char* cycleBuff[8];
        -:   28:	char* xStartBuff[8];
        -:   29:	char* yStartBuff[8];
        -:   30:	char* xStartBuff2[8];
        -:   31:	char* yStartBuff2[8];
        -:   32:	char* xStartBuff3[8];
        -:   33:	char* yStartBuff3[8];
        -:   34:	char* path[10000];
        -:   35:	char coordList[1000];
        -:   36:	int xList[10000];
        -:   37:	int yList[10000];
        -:   38:	FILE* fp;
        -:   39:	char* fieldpref[8];
        -:   40:	char* wrappref[8];
        -:   41:int main(void) {}/*
        -:   42:	//variables for recording user's input on size of field, cell placement, etc.
        1:   43:	//names should be self explanitonway's Game of Life\n\n");
        1:   44:	int xSize = 0;
        1:   45:	int ySize = 0;
        1:   46:	int numCycles = 1;
        1:   47:	int xStart = 0;
        1:   48:	int yStart = 0;
        1:   49:	int xStart2 = 0;
        1:   50:	int yStart2 = 0;
        1:   51:	int xStart3 = 0;
        1:   52:	int yStart3 = 0;
        1:   53:	char* widthBuff[8];
        -:   54:	char* heightBuff[8];
        1:   55:	char* cycleBuff[8];
        1:   56:	char* xStartBuff[8];
        1:   57:	char* yStartBuff[8];
        1:   58:	char* xStartBuff2[8];
        1:   59:	char* yStartBuff2[8];
        1:   60:	char* xStartBuff3[8];
        1:   61:	char* yStartBuff3[8];
        1:   62:	char* path[10000];
        1:   63:	char coordList[1000];
        1:   64:	int xList[10000];
        1:   65:	int yList[10000];
        1:   66:	FILE* fp;
        1:   67:	char* fieldpref[8];
        1:   68:	char* wrappref[8];*/
        -:   69:void takeInput(){
        -:   70:	//rules and input section
        1:   71:	printf("Welcome to Conway's Game of Life\n");
        -:   72:	printf("Rules:\n");
       11:   73:	printf("The game is played on a 2D orthogonal grid of square cells.\n");
      110:   74:	printf("The cells are either alive or dead.\n");
        -:   75:	printf("Every cell has eight neighbors adjacent horizontally, vertically, and diagonally\n");
      100:   76:	printf("Every turn allows for the following events:\n");
        -:   77:	printf("Any live cell with less than 2 live neighbors dies\n");
        -:   78:	printf("Any live cell with 2 or 3 live neighbors lives\n");
        1:   79:	printf("Any live cell wih 3 or more live neighbors dies\n");
        -:   80:	printf("Any dead cell with exactly 3 live neighbors becomes alive\n");
        -:   81:	printf("The rules are applied each turn until the game ends\n\n");
        5:   82:	
        -:   83:	printf("Enter preferred field type: I = infinite, B = bounded\n");
        4:   84:	scanf("%s", fieldpref);
        4:   85:	printf("Enter Width: \n");
        4:   86:	scanf("%s", widthBuff);
        4:   87:	xSize = atoi(widthBuff);
        -:   88:	printf("Enter Height: \n");
        1:   89:	scanf("%s", heightBuff);
        1:   90:	ySize = atoi(heightBuff);
        -:   91:	printf("Enter preferred field wrap style: T = toroidal, S = standard\n");
        3:   92:	scanf("%s", wrappref);
        3:   93:	printf("Enter # of Cycles \n");
        3:   94:	scanf("%s", cycleBuff);
        -:   95:	numCycles = atoi(cycleBuff);
        3:   96:	printf("Width: %d Height: %d # of Cycles: %d\n", xSize, ySize, numCycles);
        -:   97:}
    #####:   98:	//char field[xSize][ySize];
    #####:   99:	void populateField(){
        -:  100:	//2d array for field use
        -:  101:	//char field[xSize][ySize];
        -:  102:
        3:  103:	for(int a = 0; a < ySize; a++){
        -:  104:	for(int b = 0; b < xSize; b++){
        -:  105:
        -:  106:	field[a][b] = '-';
        -:  107:	}
        3:  108:	}
        -:  109:	int exit = 0;
        -:  110:
        -:  111:	//allows the user to input the coordinates they want cells at
       20:  112:	while(exit == 0)
        -:  113:	{
        -:  114:	printf("Enter Next X Coordinate or type exit to exit: ");
      180:  115:	scanf("%s",xStartBuff);
        -:  116:	xStart = atoi(xStartBuff);
        -:  117:	if(strcmp(xStartBuff,"exit") == 0)
      162:  118:	{
        -:  119:	exit = 1;
        6:  120:	break;
        -:  121:	}
        6:  122:	printf("Enter Next Y Coordinate or type exit to exit: ");
        -:  123:	scanf("%s",yStartBuff);
    #####:  124:	yStart = atoi(yStartBuff);
        -:  125:	
        -:  126:	if(strcmp(yStartBuff,"exit") == 0)
        6:  127:	{
        -:  128:	exit = 1;
    #####:  129:	break;
        -:  130:	}
        -:  131:
        6:  132:	
        -:  133:	field[yStart][xStart] = '+';
    #####:  134:	}
        -:  135:
        -:  136:
        6:  137:
        -:  138:for(int i = 0; i < numCycles; i++)
    #####:  139:{
        -:  140:	//do checking of cells in each cycle
        -:  141:	//currently unimplemented need to get rid of -1 on for loop replace with checks on ifs for exceding boundary
        6:  142:	for(int a = 0; a < ySize - 1; a++)
        -:  143:	{
    #####:  144:
        -:  145:	for(int b = 0; b < xSize - 1; b++)
        -:  146:	{
        6:  147:
        -:  148:	if(field[a][b] == '+')
    #####:  149:	{
        -:  150:	int liveNeigh = 0;
        -:  151:
        6:  152:	if(field[a+1][b] == '+')
        -:  153:	{
        2:  154:	liveNeigh = liveNeigh + 1;
        -:  155:	}
        -:  156:
        6:  157:	if(field[a+1][b+1] == '+')
        -:  158:	{
        2:  159:	liveNeigh = liveNeigh + 1;
        -:  160:	}
        -:  161:
        6:  162:	if(field[a-1][b-1] == '+')
        -:  163:	{
        6:  164:	liveNeigh = liveNeigh + 1;
        -:  165:	}
        -:  166:
        -:  167:	if(field[a][b+1] == '+')
        -:  168:	{
        -:  169:	liveNeigh = liveNeigh + 1;
      162:  170:	}
        -:  171:
      156:  172:	if(field[a-1][b] == '+')
        -:  173:	{
      156:  174:	liveNeigh = liveNeigh + 1;
        -:  175:	}
        6:  176:
        -:  177:	if(field[a][b-1] == '+')
        -:  178:	{
      156:  179:	liveNeigh = liveNeigh + 1;
        -:  180:	}
        6:  181:
        -:  182:	if(field[a-1][b+1] == '+')
        -:  183:	{
      156:  184:	liveNeigh = liveNeigh + 1;
        -:  185:	}
        6:  186:
        -:  187:	if(field[a+1][b-1] == '+')
        -:  188:	{
      156:  189:	liveNeigh = liveNeigh + 1;
        -:  190:	}
        6:  191:
        -:  192:	if(!(liveNeigh == 2 || liveNeigh == 3))
        -:  193:	{
      156:  194:	field[a][b] == '-';
        -:  195:	}
        6:  196:
        -:  197:
        -:  198:	}
      156:  199:
        -:  200:	if(field[a][b] == '-')
        6:  201:	{
        -:  202:	int liveNeigh = 0;
        -:  203:
      156:  204:	if(field[a+1][b] == '+')
        -:  205:	{
        4:  206:	liveNeigh = liveNeigh + 1;
        -:  207:	}
        -:  208:
      156:  209:	if(field[a][b+1] == '+')
        -:  210:	{
        4:  211:	liveNeigh = liveNeigh + 1;
        -:  212:	}
        -:  213:
      156:  214:	if(field[a-1][b] == '+')
        -:  215:	{
    #####:  216:	liveNeigh = liveNeigh + 1;
        -:  217:	}
        -:  218:
        -:  219:	if(field[a][b-1] == '+')
        -:  220:	{
        -:  221:	liveNeigh = liveNeigh + 1;
        -:  222:	}
        -:  223:
        -:  224:	if(field[a+1][b+1] == '+')
        2:  225:	{
       22:  226:	liveNeigh = liveNeigh + 1;
        -:  227:	}
        -:  228:
      220:  229:	if(field[a-1][b-1] == '+')
        -:  230:	{
      200:  231:	liveNeigh = liveNeigh + 1;
        -:  232:	}
       20:  233:
        -:  234:	if(field[a-1][b+1] == '+')
        2:  235:	{
        -:  236:	liveNeigh = liveNeigh + 1;
        1:  237:	}
        -:  238:
        -:  239:	if(field[a+1][b-1] == '+')
        -:  240:	{
        -:  241:	liveNeigh = liveNeigh + 1;
        -:  242:	}
        -:  243:
        -:  244:	if(liveNeigh == 3)
        -:  245:	{
        -:  246:	field[a][b] = '+';
        -:  247:	}
        -:  248:	}
        -:  249:	
        -:  250:	}
        -:  251:
        -:  252:	}
        -:  253:}
        -:  254:
        -:  255:	//print cycles
        -:  256:	printf("\nCycle %d\n", i);
        -:  257:	for(int a = 0; a < ySize; a++)
        -:  258:	{
        -:  259:
        -:  260:	for(int b = 0; b < xSize; b++)
        -:  261:	{
        -:  262:	printf("|%c|",field[a][b]);
        -:  263:	}
        -:  264:	printf("\n");
        -:  265:	}
        -:  266:	printf("\nxStart:%d yStart:%d \n",xStart,yStart);
        -:  267:}
        -:  268:	return EXIT_SUCCESS;
        -:  269:}
        -:  270:
